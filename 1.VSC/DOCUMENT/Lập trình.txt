-------------------------------------------------------------------------------------------------------------------------------------------
N là số Fibonacci nếu và chỉ khi 						||int %d||long long %lld||	
	5 N^2 + 4 hoặc 5N^2 – 4 là một số bình phương				
-------------------------------------------------------------------------------------------------------------------------------------------
Dịnh lý wilson, n là số nguyên tố > 1 khi và chỉ khi 
	==>(n-1)!+1%n==0;
-------------------------------------------------------------------------------------------------------------------------------------------
Tim chu so tan cung cua mu~ 
	https://brilliant.org/wiki/finding-the-last-digit-of-a-power/ 
-------------------------------------------------------------------------------------------------------------------------------------------
Tim duong cheo cua 1 da giac n dinh 
	==>((n-3)*n)/2;
-------------------------------------------------------------------------------------------------------------------------------------------
Tam giác đều có độ dài cạnh là n được ghép từ các tam giác đều có độ dài cạnh là 1 với nhau như hình dưới. Hãy xác định số tam giác đều 
	==>(n(n+2)(2n+1))/8;
-------------------------------------------------------------------------------------------------------------------------------------------
Cho tam giác ABC. Trên cạnh BC lấy n điểm khác nhau (không trùng với B và C). 
Nối A với các điểm đó. Hãy xác định xem ta có thể đếm được bao nhiêu hình tam giác. 
	==> tính tổng chạy từ i đến n+2 (tong+=i);
-------------------------------------------------------------------------------------------------------------------------------------------
Cho n điểm trong đó có m điểm thẳng hàng. Cứ qua 2 điểm ta vẽ một đường thẳng. 
Hãy tính xem ta vẽ được tất cả bao nhiêu đường thẳng không trùng nhau.
	==> nếu m=0 thì n*(n-1)/2 CÒN LẠI ==> n*(n-1)/2 - m*(m-1)/2 + 1;
-------------------------------------------------------------------------------------------------------------------------------------------
Tính tổng của hàng thứ n của tam giác pascal
	==> 2^(n-1);
-------------------------------------------------------------------------------------------------------------------------------------------
Cho một bàn cờ có độ dài n x n. Hãy xác định trên bàn cờ đó có bao nhiêu ô vuông.
	==> 1^2 + 2^2 + 3^2 + ... + n^2;
-------------------------------------------------------------------------------------------------------------------------------------------
getline(cin,  +tên mảng muốn nhập , +Kí tự báo hiệu kết thúc); 
	VD: KTBHKT là i thì khi nhập tới giá trị i sẽ tự động bỏ phía sau
---------------------------------------
Stack có các hàm sau (ví dụ cho C++):
    
    size : trả về kích thước hiện tại của stack. ĐPT O(1).
    empty : true stack nếu rỗng, và ngược lại. ĐPT O(1).
    push : đẩy phần tử vào stack. ĐPT O(1).
    pop : loại bỏ phẩn tử ở đỉnh của stack. ĐPT O(1).
    top : truy cập tới phần tử ở đỉnh stack. ĐPT O(1).
-------------------------------------------------------------------------------------------------------------------------------------------
VD: a= 1.49. Nếu muốn in 1.490000:
Thì cout<<fixed<<setprecision(9)<<f; //Thếm thư viện #include <iomanip> hoặc  #include<bits/stdc++.h>(Chứa các thư viện cơ bản)
-------------------------------------------------------------------------------------------------------------------------------------------
cout << (1 << (n));    In ra màn hình 2 mũ n;
-------------------------------------------------------------------------------------------------------------------------------------------
Phép AND	 	&
Phép OR	 		|
Phép phủ định NOT	~
Phép XOR	 	^
Phép dịch trái		<<
Phép dịch phải		>>
-------------------------------------------------------------------------------------------------------------------------------------------
scanf("%*d",&n);  nhập vào một số nguyên n nhưng không thay đổi giá trị tại n;
-------------------------------------------------------------------------------------------------------------------------------------------
if(a == b)          giống với       if((a=b))
-------------------------------------------------------------------------------------------------------------------------------------------
log2(n)+1		==> trả về số lượng bit của 1 số. Ví dụ : 27 ==>  11011  ==> 5
-------------------------------------------------------------------------------------------------------------------------------------------
(start  +  end) / 2  == start + (end-start)/2
Tuy nhiên phương pháp bên phải ít rủi ro hơn t=khi làm việc với các số lớn
-------------------------------------------------------------------------------------------------------------------------------------------
Một mảng đã sort theo thứ tự tăng dần thì khi đổi chổ 2 vị trí đầu/cuối tăng/giảm dần đến trùng nhau thì thứ tự
sẽ thay đổi thành giảm dần.

-------------------------------------------------------------------------------------------------------------------------------------------
class Stack {
private:
    T* elements;
    int top;													
    int capacity;

public:
    Stack(int size) : top(-1), capacity(size) {       <--Viết tắt
        elements = new T[capacity];
    }
}

struct person{
    int age;
    char name;
};

int main(){
    person a = person{1,'v'};                          <--Viết tắt
    std::cout<<a.name;
}
------------------------------------------------------------------------------------------------------------------------------------------
Có thể khai báo hàm trước rồi định nghĩa hàm sau:
Ví dụ:

int max(int a, int b);

int main(){
    ...
}

int max(int a, int b) return a>b?a:b;
------------------------------------------------------------------------------------------------------------------------------------------
Muốn khai báo mảng 2 chiều làm tham số phải:
Ví dụ: int ???(int arr[h][c],....){ ....;}
Vì bản chất phải khai báo arr[??][??] chứ ko được để trống. arr[h][c] hoặc arr[][c] đều được vì để trống ô vuông đầu tức là giá trị của ô 
vuông đầu và sau bằng nhau (Tùy trường hợp!).
------------------------------------------------------------------------------------------------------------------------------------------

